<?php

/**
 * @file
 * The Zendesk module helps you to remote authenticate your users 
 * using Drupal 
 *
 * authors: 
 * Tom Deryckere (Tom.Deryckere@gmail.com)
 * Mark Koester (https://github.com/markwk/zendesk)
 */

/**
 * Implements hook_permission().
 */
function zendesk_permission() {
  return array(
    'configure zendesk' => array(
      'title' => t('Configure Zendesk'), 
      'description' => t('Configure Drupal settings to communicate with Zendesk.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function zendesk_menu() {
  // callback use by zendesk for remote authentication
  $items['services/zendesk'] = array(
    'title' => 'Zendesk remote authentication',
    'page callback' => 'zendesk_remote_authentication',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['zendesk/support'] = array(
    'title' => 'Zendesk redirection',
    'page callback' => 'zendesk_redirect',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/people/zendesk'] = array(
    'title' => 'Zendesk settings',
    'access arguments' => array('configure zendesk'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('zendesk_configuration_form'),
    'type' => MENU_NORMAL_ITEM,
    'description' => t('Configure Drupal settings to communicate with Zendesk'),
    'file' => 'zendesk.admin.inc',
  );
  return $items;
}

/**
 * Remote authentication script (see: http://www.zendesk.com/api/remote_authentication)
 */
function zendesk_remote_authentication() {
  global $user;
  // check if anonymous, if so redirect to login with destination the path where he comes from
  if ($user->uid) {
    //check if user role is allowed to be authenticated
    if (zendesk_user_has_access($user)) {
      $destination = '';
      if (!empty($_SESSION['zendesk_page'])) {
        $destination = $_SESSION['zendesk_page'];
        unset($_SESSION['zendesk_page']);
      }
      else {
        $destination = $_GET['return_to'];
      }
      zendesk_authenticate_user($destination);
    }
    else {
      drupal_goto(variable_get('zendesk_no_permission_page', ''));
    }
  }
  else {
    $_SESSION['zendesk_page'] = $_GET['return_to'];

    drupal_goto('user', array('query' => array('destination' => 'services/zendesk')));
  }
}

/**
 * Authentication of the user after the user is logged in
 */
function zendesk_authenticate_user($destination = '') {
  global $user;
  $url = '';
  $timestamp = empty($_GET['timestamp']) ? time() : $_GET['timestamp'];

  $hash = MD5($user->name . $user->mail . $user->uid . variable_get('zendesk_secret_key', '') . $timestamp);
  drupal_goto(
    variable_get('zendesk_url', '') . '/access/remote', array(
    'query' =>
    array(
      'name' => $user->name,
      'email' => $user->mail,
      'timestamp' => $timestamp,
      'hash' => $hash,
      'external_id' => $user->uid,
      'return_to' => $destination,
    )
    )
  );
}

/* * *
 * Check if the user may be be authenticated or synced with zendesk
 */

function zendesk_user_has_access($user) {
  $zendesk_roles = variable_get('zendesk_roles', array());
  if (!array_sum($zendesk_roles)) { // no roles are set, give access
    return TRUE;
  }
  else {
    $keys = array_keys($user->roles);
    foreach ($keys as $key) {
      if ($zendesk_roles[$key] > 0) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Implementation of hook_user. Following actions are supported:
 *  Adding a user
 *  Removing a user
 *  Deleting a users
 */
function zendesk_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'insert':
      $zd = zendesk_initialize_library();
      $result = $zd->create(ZENDESK_USERS, array(
        'details' => array(
          'email' => $account->mail,
          'name' => $account->name,
          'external-id' => $account->uid,
        ),
        ));
      if (!$result) {
        watchdog('zendesk', 'error code: ' . $zd->result['code'], WATCHDOG_ERROR);
      }
      else {
        db_insert('zendesk_users')
          ->fields(array(
            'uid' => $account->uid,
            'zid' => $result,
          ))
          ->execute();
      }
      break;
    case 'update':
      $zd = zendesk_initialize_library();
      $zendesk_id = zendesk_get_user($account->uid);
      $result = $zd->update(ZENDESK_USERS, array(
        'id' => $zendesk_id,
        'details' => array(
          'email' => $account->mail,
          'name' => $account->name,
          'external-id' => $account->uid,
        ),
        )
      );
      if (!$result) {
        watchdog('zendesk', 'error: ' . $zd->result['code'], WATCHDOG_ERROR);
      }
      break;
    case 'delete':
      $zd = zendesk_initialize_library();
      $zendesk_id = zendesk_get_user($account->uid);
      $result = $zd->delete(ZENDESK_USERS, array('id' => $zendesk_id));
      if (!$result) {
        watchdog('zendesk', 'error: ' . $zd->result['code'], WATCHDOG_ERROR);
      }
      else {
        db_delete('zendesk_users')->condition('uid', $account->uid, '=')->execute();
      }
      break;
  }
}

/**
 * Helper function to retrieve zendesk id of the user
 */
function zendesk_get_user($uid) {
  $query = db_select('zendesk_users', 'zu')
      ->fields('zu', array('uid', 'zid'))->condition('zu.uid', $uid, '=');
  $result = $query->execute();
  if ($result->rowCount() <> 0) {
    foreach ($result as $user) {
      return $user->zid;
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Initialization of the zendesk library 
 */
function zendesk_initialize_library() {
  require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'zendesk') . "/lib/Zendesk.lib.php";
  $zd = new Zendesk(variable_get('zendesk_api_group', ''), variable_get('zendesk_api_mail', ''), variable_get('zendesk_api_pass', ''), FALSE);
  return $zd;
}

/**
 * Zendesk redirect
 */
function zendesk_redirect() {
  drupal_goto(variable_get('zendesk_url', ''));
}